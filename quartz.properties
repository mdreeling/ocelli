org.quartz.scheduler.skipUpdateCheck=true
#
# Apache License
# Version 2.0, January 2004
# http://www.apache.org/licenses/
#
# Copyright 2008-2010 by chenillekit.org
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#

#============================================================================
# Configure Scheduler Properties
#============================================================================

# Can be any string, and the value has no meaning to the scheduler itself -
# but rather serves as a mechanism for client code to distinguish schedulers when multiple instances
# are used within the same program. If you are using the clustering features, you must use the same
# name for every instance in the cluster that is 'logically' the same Scheduler.
org.quartz.scheduler.instanceName = OcelliScheduler

# Can be any string, but must be unique for all schedulers working as if they are the same 'logical' Scheduler within a cluster.
# You may use the value "AUTO" as the instanceId if you wish the Id to be generated for you.
org.quartz.scheduler.instanceId = AUTO

#============================================================================
# Configure ThreadPool
#============================================================================

# Is the name of the ThreadPool implementation you wish to use.
# The threadpool that ships with Quartz is "org.quartz.simpl.SimpleThreadPool", and should meet the needs of nearly every user.
# It has very simple behavior and is very well tested. It provides a fixed-size pool of threads that 'live' the lifetime of the Scheduler.
#
org.quartz.threadPool.class = org.quartz.simpl.SimpleThreadPool

# Can be any positive integer, although you should realize that only numbers between 1 and 100 are very practical.
# This is the number of threads that are available for concurrent execution of jobs.
# If you only have a few jobs that fire a few times a day, then 1 thread is plenty!
# If you have tens of thousands of jobs, with many firing every minute, then you probably want a thread count more like 50 or 100
# (this highly depends on the nature of the work that your jobs perform, and your systems resources!).
#
org.quartz.threadPool.threadCount = 100

# Can be any int between Thread.MIN_PRIORITY (which is 1) and Thread.MAX_PRIORITY (which is 10).
# The default is Thread.NORM_PRIORITY (5).
org.quartz.threadPool.threadPriority = 5

#============================================================================
# Configure JobStore
#============================================================================

# The the number of milliseconds the scheduler will 'tolerate' a trigger to pass its next-fire-time by, before being considered "misfired".
# The default value (if you don't make an entry of this property in your configuration) is 60000 (60 seconds).
#
org.quartz.jobStore.misfireThreshold = 60000

# RAMJobStore is used to store scheduling information (job, triggers and calendars) within memory.
# RAMJobStore is fast and lightweight, but all scheduling information is lost when the process terminates.
#
org.quartz.jobStore.class = org.quartz.simpl.RAMJobStore

#============================================================================
# Configure Plugins
#============================================================================

# The logging trigger history plugin catches trigger events (it is also a trigger listener) and logs then with Jakarta Commons-Logging.
# See the class's JavaDoc for a list of all the possible parameters.
org.quartz.plugin.triggHistory.class = org.quartz.plugins.history.LoggingJobHistoryPlugin